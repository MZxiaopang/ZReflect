什么是SpringMVC
	基于MVC模式的一个框架，解决了web开发中常见的一些问题，并且与Spring无缝集成
		1：接收参数
			直接接受模型对象
		2：返回参数
			1：如果返回页面内容的同时需要跳转到指定页面就是用：使用servlet元生API 或 ModelAndView
			2：如果返回页面内容，不需要跳转页面（异步请求），使用@ResponseBody
		3：页面跳转
			1：使用ModelAndView进行页面跳转
			2：直接返回字符串，SpringMVC会自动找到对应的视图.
		4：文件上传
		
		5：国际化
		
		6：表单校验等等.....
			tomcat
			web.xml
			
请求			DispatcherServlet（读取springMVC配置文件）	请求分发器
			请求交给我们配置在xml中类进行处理

如果没有指定springMVC配置文件的位置的话，默认会在WEB-INF寻找SpringMVC-servlet.xml
使用<load-on-startup>1</load-on-startup>指定DispatcherServlet实例化的时机

URL映射的方式
	1：在xml中配置bean，name指定为url映射路径，class为处理对应请求路径的类，该类需要实现controller接口
	默认使用handlerequest方法处理请求。缺点，：类中只有一个方法能请求处理

	2：使用@Controller修饰类，然后使用@RequestMapping("/hello2") 修饰在方法上 来表示请求路径当请求这个路径的时候
	会自动调用被其修饰的方法，但是方法中必须要存在请求(不必须)和响应的对象(必须)，用来给客户端返回响应结果，
	@RequestMapping("/user")如果修饰在类上，代表//此类下所有的requestMapping 路径前面都会加上/user的路径

SpringMVC传参方式：
	// 方式一：使用元素servlet api进行接收
	// 方式二：形参列表形式接收
	// 要求：形参名称需要与jsp页面name保持一致，要不然不知道需要接受那个input的参数（同名匹配原则）
	// 如果真的不想通过同名匹配的话可以使用@RequestParam("password") 注解，
	// 将指定input输入框中的值注入到其后面的形参中（注解中写的是input的name的名字）
	// 优点：对比起servletAPI 来讲，代码简化了很多，并且做到了自动的类型转换
	// 缺点：如果需要接受参数过多的情况下。形参列表会超级长。代码观赏性较差
	// 方式三：形参列表模型传参,将前端传过来的参数封装成对应的model类对象，然后注入到形参中
	// 方式四：地址栏传参，Restful风格
	// 之前访问后台：http://127..0.01:8080/SpringMVC/login?username=zhangsan
	// Restful访问后台：http://127.0.0.1:8080/SpringMVC/login/zhangsan

SpringMVC静态资源的支持:
	在web应用中我们的所有静态资源都是有tomcat的default servlet处理的 这个servlet的映射路径为\
	与我们的DispatcherServlet的配置路径相同， 所以我们配置的servlet会覆盖掉 tomcat的default
	
	servlet.
	解决方式一：web.xml不要配置\
	解决方式二：在springmvc.xml中使用<mvc:defulat-servlet-handler/>开启静态支持
			(需要同时开启MVC注解支持<mvc:annotation-driven/>)
	






