一 ：登录页面
	1：账号或密码为空
		前端js实现判断input事如狂内容长度	
	2：用户不存在
		在用户登录的时候根据账户查找用户，如果为空代表用户不存在
	3：密码错误
		当查询出用户，但是密码与页面接受参数不匹配则密码错误
	4：登录成功
		登录成功后天转到展示用户页面
二：展示用户
	1：页面本身没有数据。所以我们要在登录后跳转到servlet先查询所有用户，然后将查询的
		数据传递到请求中，然后根据请求转发到展示页面
三：展示分页
	1：球数据总量
	2：在查询数据库的servlet中需要接受页面传递过来的page，但是第一次访问这个servlet的
	时候由于没有经过展示页面，所以page=null，这时候可以让其默认值1，page的计算公式
	（page-1）*number  其中number为每页展示的条数
		第一次：从0开始查询5条
		第二次：从5开始查询5条
		第三次：从10开始查询5条
	3：强数据总数传递到展示页面，然后计算出页码总数，计算公式为count%number==0那么
	页码为count/number  如果count%number!=0那么页码为count/number+1
	4:循环页码，使其变成超链接标签，访问url为查询的servlet然后把页面的值传递过去。
四：增加
	1：需要先访问增加的页面，但是由于我们的页面都在WEN-INF下不能通过rel直接访问
	所以需要先使用servlet进行请求转发在访问到我们添加的页面
	2：alter中接收参数如果没有接受到id则调用增加的方法
五：修改
	1：由于修改的时候需要进行是的回显，所以需要现根据ID查询出数据原本资料，然后把
	数据在修改页面中展示出来（回显数据）
	2：当用户修改完成提交后我们在alter中接收参数，如果存在id则调用修改方法	
六:删除
	1：访问删除的servlet同时传递id过去，然后条用删除方法根据ID进行删除
	2：删除完成后需要饭后到展示用户的页面。
	
JAVA中的编程模式：
模式一：jsp+javaBean
	以jsp为中心的模式，jsp主要负责：
		1：界面的输出：
		2：参数获取
		3：调用处理业务方法
		4：跳转页面
	JavaBean主要是负责：
		1：数据的封装
	优点：如果超小型的项目开发速度快
	缺点：在jsp中存在大量Java代码，分工不明确。

模式二：jsp+javaBean+servlet
	jsp 负责：
		1：页面的输出
	JavaBean主要是负责：
		1：数据的封装	
	servlet主要负责：
		1：接受参数
		2：调用业务处理方法
		3：控制跳转
	优点：适合小型项目开发，分工比起模式一明确了一些。
	缺点：分工不算细致

模式三：三层架构模式与MVC设计模式：（本身没有任何代码，存在目的是为了责任细化）
	
		三层架构把javaEE应用分为三个层次
			1：持久层（数据层）			dao
			2：业务层					service
			3：表现层					MVC模式
	
	MVC模式：
		model:（数据模型）
			1:负责封装应用，model详细划分有两种。一种为数据模型，第二种为业务逻辑模型
			2:数据模型对应用于 我们的实体类，
			3:业务逻辑模型对应于我们的service
		view:（视图）
			1：jsp,html等都统称为view
		controller:
			1：负责接受参数，页面跳转，业务层调用。servlet

model:			封装实体类
dao:			与数据库交互的接口
dao.impl:		数据库交互接口的实现
service:		业务接口
service.impl:	业务接口的实现(及调用持久层)
controller:		放servlet
	
controller调用service    service调用dao
	
	
会话跟踪技术：
	HTTP协议是无状态的，无状态代表没有记忆力，没有记忆力则，无法在请求之间代表无法共享数据
也无法知道会话在什么时候开始与结束。也无法确定请求用户身份。
会话跟踪技术就是为了解决多个请求之间中共享数据

cookie:(小甜点)
	特点：客户端技术，数据是保存在浏览器之中，在第一次访问的时候服务器创建了一个cookie
然后传递给客户端，以后客户端每次访问浏览应用中内容的时候都会把cookie传递给服务器
cookie的创建和获取	
	创建：Cookie c = new Cookie("c", "张三");
	响应给客户端存放：resp.addCookie(c);	
	获取：Cookie[] cookies = req.getCookies();
	设置生命周期为10天：c.setMaxAge(60*60*24*10);
	设置范围c.setPath("/"); 本应用中所有资源都会共享cookie，
	如果没有设置path默认路径为URL最后一个/前面路径。
	删除：cookie.setMaxAge(0);

	1：数据存放在客户端，所以客户端的支持很重要，但是数据不安全
	2：键目前不支持中午，值目前支持（之前不支持）
	3：获取麻烦
	4：存放数量有限制（具体多少要看客户端）
	
	解决上面的问题：使用session
		
session：
1：是cookie的升级版，底层封装了cookie
2：默认生命时间为30分钟   
3：session是存储在服务器端，如果session过多会影响服务器的性能
4：session可以存放Object类型的数据，对于数据的取值比较方便。
5：cookie 可以跨域

设置session的key与value	req.getSession().setAttribute(name, value);
取出session的key与value	req.getSession().getAttribute(name, value);
设置session的存活期			req.getSession().setMaxInactiveInterval(interval);
取出session的存活期			req.getSession().getMaxInactiveInterval(interval);
删除session中的数据			req.getSession().removeAttribute(name);

	
	
面试题：
1：session 与 cookie的区别
2：什么是mvc设计模式，MVC设计模式与三层架构的区别
	
过滤器：
一个具有过滤，筛选功能的东西，可以过滤掉一些不想要的东西，与一些不和谐的内容
生活中的过滤器：滤嘴，口罩等等
web中的过滤器：filter 是web中的一个组件，主要功能就是拦截请求。
1：可以双向拦截请求与响应
2：可以正常的调用资源
3：可以阻止当前的资源调用
4：可以针对响应进行一些修改

为什么使用filter而不是在servlet中直接使用if或者三目进行拦截判断
1：责任细化方面这些不是controller需要做的功能
2：所有controller路径中都需要进行判断，重复代码太多，不利于系统维护
	
Servlet与filter <url-pattern>细节
	1：*				是通配符代表任意字段
	2：/				代表一级目录	
	3：/*				代表任意URL
	4：/*.do  			任意.do的url都可以访问
	5：/*.action		任意.action结尾的url可以访问
	6：/user/*.do		代表user路径下的任意.do结尾的url都可以访问
	
filter的细节：
	1：filter在服务器启动的时候创建了对象，并执行初始化方法，默认优先于servlet
	2：一个应用中可以有多个filter对象 创建顺序为xml中配置的顺序
	3：一个可以有多个拦截路径
	4：默认值针对新的请求进行拦截，而不对请求转发进行拦截
	5:dispatcher  可以配置拦截规则
		- FORWARD	拦截请求转发
		- INCLUDE	专门针对include进行拦截
		- REQUEST	表示只拦截 请求
		- ERROR		只拦截error
	6：相同的filter尽量不要
	7：过滤器可以拦截所有请求，包括静态资源。
	
监听器：(了解)
主要为了监听web项目中一些事件的改变。
面试题：有一个项目，在项目运行期间获得当前登录的用户人数。（退出的时候不能进行页面跳转）

1：作用域监听器。主要监听的是作用域对象的创建及销毁
	1：请求域监听器
	2：会话域监听器
	3：应用域监听器
	
2：作用域属性监听器（坚挺作用域中共享的属性）
	1：请求域监听器
	2：会话域监听器
	3：应用域监听器
	
	
	
	